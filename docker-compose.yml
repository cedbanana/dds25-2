version: "3"
services:
  gateway:
    image: envoyproxy/envoy:dev-11bfcd6dc47975ae4f05a512ec382a91735fde73
    ports:
      - "8000:8000"
      - "8080:8080"
    volumes:
      - ./envoy.yaml:/etc/envoy/envoy.yaml:ro
    depends_on:
      - order-service
      - stock-service
      - payment-service
    ulimits:
      nofile:
        soft: "65536"
        hard: "65536"

  order-service:
    build:
      context: .
      dockerfile: Dockerfile.order
    image: order:latest
    command: gunicorn -b 0.0.0.0:5000 -w 2 --timeout 30 --log-level=info -k uvicorn.workers.UvicornWorker app:app
    env_file:
      - env/order_redis.env
    environment: &dbenv
      DB_TYPE: redis
      PROFILING: false
    depends_on:
      - sentinel1
      - sentinel2
      - sentinel3
      - stock-service
      - payment-service
    deploy:
      replicas: 4
    volumes:
      - "./order/profiles:/home/flask-app/profiles"
    ulimits:
      nofile:
        soft: "65536"
        hard: "65536"

  stock-service:
    build:
      context: .
      dockerfile: Dockerfile.stock
    image: stock:latest
    command: gunicorn -b 0.0.0.0:5000 -w 2 --timeout 30 --log-level=info app:app
    env_file:
      - env/stock_redis.env
    environment: *dbenv
    depends_on:
      - sentinel1
      - sentinel2
      - sentinel3
    deploy:
      replicas: 1
    volumes:
      - "./stock/profiles:/home/flask-app/profiles"
    ulimits:
      nofile:
        soft: "65536"
        hard: "65536"

  stock-rpc:
    build:
      context: .
      dockerfile: Dockerfile.stock
    image: stock:latest
    command: python rpc.py
    env_file:
      - env/stock_redis.env
    environment: *dbenv
    depends_on:
      - sentinel1
      - sentinel2
      - sentinel3
    deploy:
      replicas: 4 # rpc
    volumes:
      - "./stock/profiles:/home/flask-app/profiles"
    ulimits:
      nofile:
        soft: "65536"
        hard: "65536"

  stock-stream:
    build:
      context: .
      dockerfile: Dockerfile.stock
    image: stock:latest
    command: python stream.py
    env_file:
      - env/stock_redis.env
    environment: *dbenv
    depends_on:
      - sentinel1
      - sentinel2
      - sentinel3
    deploy:
      replicas: 3 # stream
    volumes:
      - "./stock/profiles:/home/flask-app/profiles"

  cron:
    build:
      context: . 
      dockerfile: Dockerfile.cron
    image: cron:latest
    command: python cron.py 
    env_file: 
      - env/cron.env  
    volumes:
      - ./cron:/cron  
    depends_on:
      - payment-rpc
      - order-service
      - stock-rpc 
    # restart: unless-stopped 
    ulimits:
      nofile:
        soft: "65536"
        hard: "65536"


  payment-service:
    build:
      context: .
      dockerfile: Dockerfile.payment
    image: payment:latest
    command: gunicorn -b 0.0.0.0:5000 -w 2 --timeout 30 --log-level=info app:app
    env_file:
      - env/payment_redis.env
    environment: *dbenv
    depends_on:
      - sentinel1
      - sentinel2
      - sentinel3
    volumes:
      - "./payment/profiles:/home/flask-app/profiles"
    deploy:
      replicas: 1
    ulimits:
      nofile:
        soft: "65536"
        hard: "65536"

  payment-rpc:
    build:
      context: .
      dockerfile: Dockerfile.payment
    image: payment:latest
    command: python rpc.py
    env_file:
      - env/payment_redis.env
    environment: *dbenv
    depends_on:
      - redis-payment
    volumes:
      - "./payment/profiles:/home/flask-app/profiles"
    deploy:
      replicas: 4 # rpc

  payment-stream:
    build:
      context: .
      dockerfile: Dockerfile.payment
    image: payment:latest
    command: python stream.py
    env_file:
      - env/payment_redis.env
    environment: *dbenv
    depends_on:
      - sentinel1
      - sentinel2
      - sentinel3
    volumes:
      - "./payment/profiles:/home/flask-app/profiles"
    deploy:
      replicas: 3 # stream

  ## Database Solutions
  redis-payment:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 1024mb & sleep 3 && redis-cli -a redis FLUSHALL --masterauth redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis-order:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 1024mb & sleep 3 && redis-cli -a redis FLUSHALL --masterauth redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis-stock:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 1024mb & sleep 3 && redis-cli -a redis FLUSHALL --masterauth redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  redis-payment-replica:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 1024mb --replicaof redis-payment 6379 --masterauth redis
    depends_on:
      - redis-payment

  redis-order-replica:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 1024mb --replicaof redis-order 6379 --masterauth redis
    depends_on:
      - redis-order

  redis-stock-replica:
    image: redis:7.2-bookworm
    command: redis-server --requirepass redis --maxmemory 1024mb --replicaof redis-stock 6379 --masterauth redis
    depends_on:
      - redis-stock

  sentinel1:
    image: redis:7.2-bookworm
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./sentinel.conf:/usr/local/etc/redis/sentinel.conf
    depends_on:
      redis-payment:
        condition: service_healthy
      redis-order:
        condition: service_healthy
      redis-stock:
        condition: service_healthy

  sentinel2:
    image: redis:7.2-bookworm
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./sentinel.conf:/usr/local/etc/redis/sentinel.conf
    depends_on:
      redis-payment:
        condition: service_healthy
      redis-order:
        condition: service_healthy
      redis-stock:
        condition: service_healthy

  sentinel3:
    image: redis:7.2-bookworm
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./sentinel.conf:/usr/local/etc/redis/sentinel.conf
    depends_on:
      redis-payment:
        condition: service_healthy
      redis-order:
        condition: service_healthy
      redis-stock:
        condition: service_healthy

  # Locust for testing
  master:
    build:
      context: .
      dockerfile: Dockerfile.locust
    ports:
      - "8089:8089"
    volumes:
      - ./tests:/mnt/locust
    command: -f /mnt/locust/stress/locustfile.py --master -H http://master:8089

  worker:
    build:
      context: .
      dockerfile: Dockerfile.locust
    image: locustio/locust
    volumes:
      - ./tests:/mnt/locust
    command: -f /mnt/locust/stress/locustfile.py --worker --master-host master
    deploy:
      replicas: 3
    ulimits:
      nofile:
        soft: "65536"
        hard: "65536"
